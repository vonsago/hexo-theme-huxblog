{"expireTime":9007200842122885000,"key":"gatsby-plugin-mdx-entire-payload-d82c965f6f2e1ce74d0743ff09797104-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/vassagovon/myProject/venv3/Github/BLOG/node_modules/@pauliescanlon/gatsby-theme-terminal/src/layouts/PageLayout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":150,"offset":151},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":153},"end":{"line":5,"column":29,"offset":181},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"link","title":null,"url":"#-gatsby-theme-terminal","children":[{"type":"text","value":"gatsby-theme-terminal","position":{"start":{"line":8,"column":4,"offset":187},"end":{"line":8,"column":25,"offset":208},"indent":[]}}],"position":{"start":{"line":8,"column":3,"offset":186},"end":{"line":8,"column":51,"offset":234},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":184},"end":{"line":8,"column":51,"offset":234},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"gatsby-theme-terminal has some of it's own components, and below is how you use them.","position":{"start":{"line":10,"column":1,"offset":236},"end":{"line":10,"column":86,"offset":321},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":236},"end":{"line":10,"column":86,"offset":321},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","title":null,"url":"#site-meta-data","children":[{"type":"text","value":"SiteMetaData","position":{"start":{"line":13,"column":5,"offset":328},"end":{"line":13,"column":17,"offset":340},"indent":[]}}],"position":{"start":{"line":13,"column":4,"offset":327},"end":{"line":13,"column":35,"offset":358},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":324},"end":{"line":13,"column":35,"offset":358},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":14,"column":1,"offset":359},"end":{"line":14,"column":5,"offset":363},"indent":[]}},{"type":"inlineCode","value":"<SiteMetaData />","position":{"start":{"line":14,"column":5,"offset":363},"end":{"line":14,"column":23,"offset":381},"indent":[]}},{"type":"text","value":" component returns all fields specified by ","position":{"start":{"line":14,"column":23,"offset":381},"end":{"line":14,"column":66,"offset":424},"indent":[]}},{"type":"inlineCode","value":"siteMetadata","position":{"start":{"line":14,"column":66,"offset":424},"end":{"line":14,"column":80,"offset":438},"indent":[]}},{"type":"text","value":" in ","position":{"start":{"line":14,"column":80,"offset":438},"end":{"line":14,"column":84,"offset":442},"indent":[]}},{"type":"inlineCode","value":"gatsby-config.js","position":{"start":{"line":14,"column":84,"offset":442},"end":{"line":14,"column":102,"offset":460},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":359},"end":{"line":14,"column":102,"offset":460},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"<SiteMetaData>\n  {siteMetadata => {\n    const { name, description } = siteMetadata\n    return (\n      <ul>\n        <li>{name}</li>\n        <li>{description}</li>\n      </ul>\n    )\n  }}\n</SiteMetaData>","position":{"start":{"line":17,"column":1,"offset":463},"end":{"line":29,"column":4,"offset":681},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"<SiteMetaData>\n{siteMetadata => {\n  const { name, description } = siteMetadata\n  return (\n      <ul>\n        <li>{name}</li>\n        <li>{description}</li>\n      </ul>\n  )\n}}\n</SiteMetaData>","position":{"start":{"line":31,"column":1,"offset":683},"end":{"line":41,"column":16,"offset":873},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"<Divider />","position":{"start":{"line":44,"column":1,"offset":876},"end":{"line":44,"column":12,"offset":887},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","title":null,"url":"#source-list","children":[{"type":"text","value":"SourceList","position":{"start":{"line":46,"column":5,"offset":893},"end":{"line":46,"column":15,"offset":903},"indent":[]}}],"position":{"start":{"line":46,"column":4,"offset":892},"end":{"line":46,"column":30,"offset":918},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":889},"end":{"line":46,"column":30,"offset":918},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"By default the source list returns all ","position":{"start":{"line":47,"column":1,"offset":919},"end":{"line":47,"column":40,"offset":958},"indent":[]}},{"type":"inlineCode","value":".mdx","position":{"start":{"line":47,"column":40,"offset":958},"end":{"line":47,"column":46,"offset":964},"indent":[]}},{"type":"text","value":" found from the directories defined in ","position":{"start":{"line":47,"column":46,"offset":964},"end":{"line":47,"column":85,"offset":1003},"indent":[]}},{"type":"inlineCode","value":"gatsby-config.js","position":{"start":{"line":47,"column":85,"offset":1003},"end":{"line":47,"column":103,"offset":1021},"indent":[]}},{"type":"text","value":". You can also use the ","position":{"start":{"line":47,"column":103,"offset":1021},"end":{"line":47,"column":126,"offset":1044},"indent":[]}},{"type":"inlineCode","value":"filter","position":{"start":{"line":47,"column":126,"offset":1044},"end":{"line":47,"column":134,"offset":1052},"indent":[]}},{"type":"text","value":" prop with this component eg: ","position":{"start":{"line":47,"column":134,"offset":1052},"end":{"line":47,"column":164,"offset":1082},"indent":[]}},{"type":"inlineCode","value":"<SourceList filter='posts' />","position":{"start":{"line":47,"column":164,"offset":1082},"end":{"line":47,"column":195,"offset":1113},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":919},"end":{"line":47,"column":195,"offset":1113},"indent":[]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"NOTE:","position":{"start":{"line":49,"column":2,"offset":1116},"end":{"line":49,"column":7,"offset":1121},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":1115},"end":{"line":49,"column":8,"offset":1122},"indent":[]}},{"type":"text","value":" the ","position":{"start":{"line":49,"column":8,"offset":1122},"end":{"line":49,"column":13,"offset":1127},"indent":[]}},{"type":"inlineCode","value":"filter","position":{"start":{"line":49,"column":13,"offset":1127},"end":{"line":49,"column":21,"offset":1135},"indent":[]}},{"type":"text","value":" source ","position":{"start":{"line":49,"column":21,"offset":1135},"end":{"line":49,"column":29,"offset":1143},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"must","position":{"start":{"line":49,"column":30,"offset":1144},"end":{"line":49,"column":34,"offset":1148},"indent":[]}}],"position":{"start":{"line":49,"column":29,"offset":1143},"end":{"line":49,"column":35,"offset":1149},"indent":[]}},{"type":"text","value":" be one from your ","position":{"start":{"line":49,"column":35,"offset":1149},"end":{"line":49,"column":53,"offset":1167},"indent":[]}},{"type":"inlineCode","value":"gatsby-config.js","position":{"start":{"line":49,"column":53,"offset":1167},"end":{"line":49,"column":71,"offset":1185},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":1115},"end":{"line":49,"column":71,"offset":1185},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"<SourceList>\n  {source => (\n    <ul>\n      {source.map((edge, index) => {\n        const {\n          frontmatter: { title },\n        } = edge.node\n        return <li key={index}>{title}</li>\n      })}\n    </ul>\n  )}\n</SourceList>","position":{"start":{"line":52,"column":1,"offset":1188},"end":{"line":65,"column":4,"offset":1434},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"<SourceList>\n  {source => (\n    <ul>\n      {source.map((edge, index) => {\n        const {\n          frontmatter: { title },\n        } = edge.node\n        return <li key={index}>{title}</li>\n      })}\n    </ul>\n  )}\n</SourceList>","position":{"start":{"line":67,"column":1,"offset":1436},"end":{"line":78,"column":14,"offset":1664},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"<Divider />","position":{"start":{"line":80,"column":1,"offset":1666},"end":{"line":80,"column":12,"offset":1677},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","title":null,"url":"#source-days","children":[{"type":"text","value":"SourceDays","position":{"start":{"line":82,"column":5,"offset":1683},"end":{"line":82,"column":15,"offset":1693},"indent":[]}}],"position":{"start":{"line":82,"column":4,"offset":1682},"end":{"line":82,"column":30,"offset":1708},"indent":[]}}],"position":{"start":{"line":82,"column":1,"offset":1679},"end":{"line":82,"column":30,"offset":1708},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"By default source days returns an accumulated count and percent of all ","position":{"start":{"line":83,"column":1,"offset":1709},"end":{"line":83,"column":72,"offset":1780},"indent":[]}},{"type":"inlineCode","value":"frontmatter","position":{"start":{"line":83,"column":72,"offset":1780},"end":{"line":83,"column":85,"offset":1793},"indent":[]}},{"type":"text","value":" date fields grouped by year. You can also use the ","position":{"start":{"line":83,"column":85,"offset":1793},"end":{"line":83,"column":136,"offset":1844},"indent":[]}},{"type":"inlineCode","value":"filter","position":{"start":{"line":83,"column":136,"offset":1844},"end":{"line":83,"column":144,"offset":1852},"indent":[]}},{"type":"text","value":" prop with this component eg: ","position":{"start":{"line":83,"column":144,"offset":1852},"end":{"line":83,"column":174,"offset":1882},"indent":[]}},{"type":"inlineCode","value":"<SourceDays filter='posts' />","position":{"start":{"line":83,"column":174,"offset":1882},"end":{"line":83,"column":205,"offset":1913},"indent":[]}}],"position":{"start":{"line":83,"column":1,"offset":1709},"end":{"line":83,"column":205,"offset":1913},"indent":[]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"NOTE:","position":{"start":{"line":85,"column":2,"offset":1916},"end":{"line":85,"column":7,"offset":1921},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":1915},"end":{"line":85,"column":8,"offset":1922},"indent":[]}},{"type":"text","value":" the ","position":{"start":{"line":85,"column":8,"offset":1922},"end":{"line":85,"column":13,"offset":1927},"indent":[]}},{"type":"inlineCode","value":"filter","position":{"start":{"line":85,"column":13,"offset":1927},"end":{"line":85,"column":21,"offset":1935},"indent":[]}},{"type":"text","value":" source ","position":{"start":{"line":85,"column":21,"offset":1935},"end":{"line":85,"column":29,"offset":1943},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"must","position":{"start":{"line":85,"column":30,"offset":1944},"end":{"line":85,"column":34,"offset":1948},"indent":[]}}],"position":{"start":{"line":85,"column":29,"offset":1943},"end":{"line":85,"column":35,"offset":1949},"indent":[]}},{"type":"text","value":" be one from your ","position":{"start":{"line":85,"column":35,"offset":1949},"end":{"line":85,"column":53,"offset":1967},"indent":[]}},{"type":"inlineCode","value":"gatsby-config.js","position":{"start":{"line":85,"column":53,"offset":1967},"end":{"line":85,"column":71,"offset":1985},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":1915},"end":{"line":85,"column":71,"offset":1985},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"<SourceDays>\n  {sourceDays => {\n    const currentYear = sourceDays[sourceDays.length - 1]\n    return (\n       <Box>\n        {currentYear.map((day, index) => {\n          const { name, count, percent } = day\n          return (\n            <Flex\n              key={index}\n              sx={{\n                backgroundColor: 'surface',\n                flexDirection: 'column',\n                mb: 2,\n                position: 'relative',\n              }}\n            >\n              <Box\n                sx={{\n                  backgroundColor: 'primary',\n                  height: '100%',\n                  position: 'absolute',\n                  width: `${percent}%`,\n                }}\n              />\n              <Box\n                sx={{\n                  position: 'relative',\n                  display: 'flex',\n                  justifyContent: 'space-between',\n                }}\n              >\n                <Text sx={{ textTransform: 'capitalize', pl: 2 }}>\n                  {name}\n                </Text>\n                <Text sx={{ pr: 2 }}>{`x${count}`}</Text>\n              </Box>\n            </Flex>\n          )\n        })}\n      </Box>\n    )\n  }}\n</SourceDays>","position":{"start":{"line":87,"column":1,"offset":1987},"end":{"line":132,"column":4,"offset":3186},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"<SourceDays>\n  {sourceDays => {\n    const currentYear = sourceDays[sourceDays.length - 1]\n    return (\n       <Box>\n        {currentYear.map((day, index) => {\n          const { name, count, percent } = day\n          return (\n            <Flex\n              key={index}\n              sx={{\n                backgroundColor: 'surface',\n                flexDirection: 'column',\n                mb: 2,\n                position: 'relative',\n              }}\n            >\n              <Box\n                sx={{\n                  backgroundColor: 'primary',\n                  height: '100%',\n                  position: 'absolute',\n                  width: `${percent}%`,\n                }}\n              />\n              <Box\n                sx={{\n                  position: 'relative',\n                  display: 'flex',\n                  justifyContent: 'space-between',\n                }}\n              >\n                <Text sx={{ textTransform: 'capitalize', pl: 2 }}>\n                  {name}\n                </Text>\n                <Text sx={{ pr: 2 }}>{`x${count}`}</Text>\n              </Box>\n            </Flex>\n          )\n        })}\n      </Box>\n    )\n  }}\n</SourceDays>","position":{"start":{"line":134,"column":1,"offset":3188},"end":{"line":177,"column":14,"offset":4369},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"<Divider />","position":{"start":{"line":179,"column":1,"offset":4371},"end":{"line":179,"column":12,"offset":4382},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","title":null,"url":"#source-months","children":[{"type":"text","value":"SourceMonths","position":{"start":{"line":181,"column":5,"offset":4388},"end":{"line":181,"column":17,"offset":4400},"indent":[]}}],"position":{"start":{"line":181,"column":4,"offset":4387},"end":{"line":181,"column":34,"offset":4417},"indent":[]}}],"position":{"start":{"line":181,"column":1,"offset":4384},"end":{"line":181,"column":34,"offset":4417},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"By default source months returns an accumulated count and percent of all ","position":{"start":{"line":182,"column":1,"offset":4418},"end":{"line":182,"column":74,"offset":4491},"indent":[]}},{"type":"inlineCode","value":"frontmatter","position":{"start":{"line":182,"column":74,"offset":4491},"end":{"line":182,"column":87,"offset":4504},"indent":[]}},{"type":"text","value":" date fields grouped by year. You can also use the ","position":{"start":{"line":182,"column":87,"offset":4504},"end":{"line":182,"column":138,"offset":4555},"indent":[]}},{"type":"inlineCode","value":"filter","position":{"start":{"line":182,"column":138,"offset":4555},"end":{"line":182,"column":146,"offset":4563},"indent":[]}},{"type":"text","value":" prop with this component eg: ","position":{"start":{"line":182,"column":146,"offset":4563},"end":{"line":182,"column":176,"offset":4593},"indent":[]}},{"type":"inlineCode","value":"<SourceMonths filter='posts' />","position":{"start":{"line":182,"column":176,"offset":4593},"end":{"line":182,"column":209,"offset":4626},"indent":[]}}],"position":{"start":{"line":182,"column":1,"offset":4418},"end":{"line":182,"column":209,"offset":4626},"indent":[]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"NOTE:","position":{"start":{"line":184,"column":2,"offset":4629},"end":{"line":184,"column":7,"offset":4634},"indent":[]}}],"position":{"start":{"line":184,"column":1,"offset":4628},"end":{"line":184,"column":8,"offset":4635},"indent":[]}},{"type":"text","value":" the ","position":{"start":{"line":184,"column":8,"offset":4635},"end":{"line":184,"column":13,"offset":4640},"indent":[]}},{"type":"inlineCode","value":"filter","position":{"start":{"line":184,"column":13,"offset":4640},"end":{"line":184,"column":21,"offset":4648},"indent":[]}},{"type":"text","value":" source ","position":{"start":{"line":184,"column":21,"offset":4648},"end":{"line":184,"column":29,"offset":4656},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"must","position":{"start":{"line":184,"column":30,"offset":4657},"end":{"line":184,"column":34,"offset":4661},"indent":[]}}],"position":{"start":{"line":184,"column":29,"offset":4656},"end":{"line":184,"column":35,"offset":4662},"indent":[]}},{"type":"text","value":" be one from your ","position":{"start":{"line":184,"column":35,"offset":4662},"end":{"line":184,"column":53,"offset":4680},"indent":[]}},{"type":"inlineCode","value":"gatsby-config.js","position":{"start":{"line":184,"column":53,"offset":4680},"end":{"line":184,"column":71,"offset":4698},"indent":[]}}],"position":{"start":{"line":184,"column":1,"offset":4628},"end":{"line":184,"column":71,"offset":4698},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"<SourceMonths>\n  {sourceMonths => {\n    const currentYear = sourceMonths[sourceMonths.length - 1]\n    return (\n      <Box sx={{ backgroundColor: 'surface', p: 3 }}>\n        <Heading variant=\"styles.h4\">{currentYear[0].year}</Heading>\n        <Box sx={{ display: 'flex', flex: '1 1 auto', height: 300 }}>\n          <Flex sx={{ flexWrap: 'wrap', width: '100%' }}>\n            {currentYear.map((month, index) => {\n              const { initial, count, percent } = month\n              return (\n                <Box\n                  key={index}\n                  sx={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    justifyContent: 'flex-end',\n                    pl: 1,\n                    pr: 1,\n                    width: `${100 / currentYear.length}%`,\n                  }}\n                >\n                 <Text\n                    sx={{\n                      textAlign: 'center',\n                    }}\n                  >\n                    {`x${count}`}\n                  </Text>\n                  <Box\n                    sx={{\n                      backgroundColor: 'primary',\n                      height: `${percent}%`,\n                      p: 1,\n                    }}\n                  />\n                  <Text\n                    sx={{\n                      textTransform: 'uppercase',\n                      textAlign: 'center',\n                    }}\n                  >\n                    {initial}\n                  </Text>\n                </Box>\n              )\n            })}\n          </Flex>\n        </Box>\n      </Box>\n    )\n  }}\n</SourceMonths>","position":{"start":{"line":186,"column":1,"offset":4700},"end":{"line":240,"column":4,"offset":6345},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"<SourceMonths>\n  {sourceMonths => {\n    const currentYear = sourceMonths[sourceMonths.length - 1]\n    return (\n      <Box sx={{ backgroundColor: 'surface', p: 3 }}>\n        <Heading variant=\"styles.h4\">{currentYear[0].year}</Heading>\n        <Box sx={{ display: 'flex', flex: '1 1 auto', height: 300 }}>\n          <Flex sx={{ flexWrap: 'wrap', width: '100%' }}>\n            {currentYear.map((month, index) => {\n              const { initial, count, percent } = month\n              return (\n                <Box\n                  key={index}\n                  sx={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    justifyContent: 'flex-end',\n                    pl: 1,\n                    pr: 1,\n                    width: `${100 / currentYear.length}%`,\n                  }}\n                >\n                 <Text\n                    sx={{\n                      textAlign: 'center',\n                    }}\n                  >\n                    {`x${count}`}\n                  </Text>\n                  <Box\n                    sx={{\n                      backgroundColor: 'primary',\n                      height: `${percent}%`,\n                      p: 1,\n                    }}\n                  />\n                  <Text\n                    sx={{\n                      textTransform: 'uppercase',\n                      textAlign: 'center',\n                    }}\n                  >\n                    {initial}\n                  </Text>\n                </Box>\n              )\n            })}\n          </Flex>\n        </Box>\n      </Box>\n    )\n  }}\n</SourceMonths>","position":{"start":{"line":242,"column":1,"offset":6347},"end":{"line":294,"column":16,"offset":7974},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"<Divider />","position":{"start":{"line":296,"column":1,"offset":7976},"end":{"line":296,"column":12,"offset":7987},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","title":null,"url":"#tag-list","children":[{"type":"text","value":"SourceTags","position":{"start":{"line":298,"column":5,"offset":7993},"end":{"line":298,"column":15,"offset":8003},"indent":[]}}],"position":{"start":{"line":298,"column":4,"offset":7992},"end":{"line":298,"column":27,"offset":8015},"indent":[]}}],"position":{"start":{"line":298,"column":1,"offset":7989},"end":{"line":298,"column":27,"offset":8015},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"By default source tags returns all tags found in the ","position":{"start":{"line":299,"column":1,"offset":8016},"end":{"line":299,"column":54,"offset":8069},"indent":[]}},{"type":"inlineCode","value":".mdx","position":{"start":{"line":299,"column":54,"offset":8069},"end":{"line":299,"column":60,"offset":8075},"indent":[]}},{"type":"text","value":" sourced from the directories defined in `gatsby-config.js.","position":{"start":{"line":299,"column":60,"offset":8075},"end":{"line":299,"column":119,"offset":8134},"indent":[]}}],"position":{"start":{"line":299,"column":1,"offset":8016},"end":{"line":299,"column":119,"offset":8134},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can also use the ","position":{"start":{"line":301,"column":1,"offset":8136},"end":{"line":301,"column":22,"offset":8157},"indent":[]}},{"type":"inlineCode","value":"filter","position":{"start":{"line":301,"column":22,"offset":8157},"end":{"line":301,"column":30,"offset":8165},"indent":[]}},{"type":"text","value":" prop with this component eg: ","position":{"start":{"line":301,"column":30,"offset":8165},"end":{"line":301,"column":60,"offset":8195},"indent":[]}},{"type":"inlineCode","value":"<SourceTags filter='posts' />","position":{"start":{"line":301,"column":60,"offset":8195},"end":{"line":301,"column":91,"offset":8226},"indent":[]}}],"position":{"start":{"line":301,"column":1,"offset":8136},"end":{"line":301,"column":91,"offset":8226},"indent":[]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"NOTE:","position":{"start":{"line":303,"column":2,"offset":8229},"end":{"line":303,"column":7,"offset":8234},"indent":[]}}],"position":{"start":{"line":303,"column":1,"offset":8228},"end":{"line":303,"column":8,"offset":8235},"indent":[]}},{"type":"text","value":" the ","position":{"start":{"line":303,"column":8,"offset":8235},"end":{"line":303,"column":13,"offset":8240},"indent":[]}},{"type":"inlineCode","value":"filter","position":{"start":{"line":303,"column":13,"offset":8240},"end":{"line":303,"column":21,"offset":8248},"indent":[]}},{"type":"text","value":" source ","position":{"start":{"line":303,"column":21,"offset":8248},"end":{"line":303,"column":29,"offset":8256},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"must","position":{"start":{"line":303,"column":30,"offset":8257},"end":{"line":303,"column":34,"offset":8261},"indent":[]}}],"position":{"start":{"line":303,"column":29,"offset":8256},"end":{"line":303,"column":35,"offset":8262},"indent":[]}},{"type":"text","value":" be one from your `gatsby-config.js``","position":{"start":{"line":303,"column":35,"offset":8262},"end":{"line":303,"column":72,"offset":8299},"indent":[]}}],"position":{"start":{"line":303,"column":1,"offset":8228},"end":{"line":303,"column":72,"offset":8299},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"<SourceTags>\n  {source => (\n    <Flex\n    sx={{flexDirection: 'column'}}\n    >\n      {\n        source.map((tag, index) => {\n          const {name, count, percent} = tag\n          return (<Box  key={index}>\n            {`${name}  x${count}`}\n            <Box mb={2}  bg='muted' sx={{width: `${percent}%`, height: 4}} />\n          </Box>\n        })\n      }\n    </Flex>\n  )}\n</SourceTags>","position":{"start":{"line":305,"column":1,"offset":8301},"end":{"line":323,"column":4,"offset":8704},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"<SourceTags>\n  {source => (\n    <Flex\n    sx={{flexDirection: 'column'}}\n    >\n      {\n        source.map((tag, index) => {\n          const {name, count, percent} = tag\n          return <Box  key={index}>\n            {`${name}  x${count}`}\n            <Box mb={2}  bg='muted' sx={{width: `${percent}%`, height: 4}}></Box>\n          </Box>\n        })\n      }\n    </Flex>\n  )}\n</SourceTags>","position":{"start":{"line":325,"column":1,"offset":8706},"end":{"line":341,"column":14,"offset":9094},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"<Divider />","position":{"start":{"line":343,"column":1,"offset":9096},"end":{"line":343,"column":12,"offset":9107},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","title":null,"url":"#embedded-images","children":[{"type":"text","value":"embeddedImages","position":{"start":{"line":345,"column":5,"offset":9113},"end":{"line":345,"column":19,"offset":9127},"indent":[]}}],"position":{"start":{"line":345,"column":4,"offset":9112},"end":{"line":345,"column":38,"offset":9146},"indent":[]}}],"position":{"start":{"line":345,"column":1,"offset":9109},"end":{"line":345,"column":38,"offset":9146},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Using a frontmatter field called ","position":{"start":{"line":346,"column":1,"offset":9147},"end":{"line":346,"column":34,"offset":9180},"indent":[]}},{"type":"inlineCode","value":"embeddedImages","position":{"start":{"line":346,"column":34,"offset":9180},"end":{"line":346,"column":50,"offset":9196},"indent":[]}},{"type":"text","value":" you can define a ","position":{"start":{"line":346,"column":50,"offset":9196},"end":{"line":346,"column":68,"offset":9214},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"list","position":{"start":{"line":346,"column":69,"offset":9215},"end":{"line":346,"column":73,"offset":9219},"indent":[]}}],"position":{"start":{"line":346,"column":68,"offset":9214},"end":{"line":346,"column":74,"offset":9220},"indent":[]}},{"type":"text","value":" of locally sourced images to embed in the ","position":{"start":{"line":346,"column":74,"offset":9220},"end":{"line":346,"column":117,"offset":9263},"indent":[]}},{"type":"inlineCode","value":".mdx","position":{"start":{"line":346,"column":117,"offset":9263},"end":{"line":346,"column":123,"offset":9269},"indent":[]}},{"type":"text","value":" body. ","position":{"start":{"line":346,"column":123,"offset":9269},"end":{"line":346,"column":130,"offset":9276},"indent":[]}}],"position":{"start":{"line":346,"column":1,"offset":9147},"end":{"line":346,"column":130,"offset":9276},"indent":[]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"NOTE:","position":{"start":{"line":348,"column":2,"offset":9279},"end":{"line":348,"column":7,"offset":9284},"indent":[]}}],"position":{"start":{"line":348,"column":1,"offset":9278},"end":{"line":348,"column":8,"offset":9285},"indent":[]}},{"type":"text","value":" this method won't work for ","position":{"start":{"line":348,"column":8,"offset":9285},"end":{"line":348,"column":36,"offset":9313},"indent":[]}},{"type":"inlineCode","value":".mdx","position":{"start":{"line":348,"column":36,"offset":9313},"end":{"line":348,"column":42,"offset":9319},"indent":[]}},{"type":"text","value":" sourced from ","position":{"start":{"line":348,"column":42,"offset":9319},"end":{"line":348,"column":56,"offset":9333},"indent":[]}},{"type":"inlineCode","value":"src/pages","position":{"start":{"line":348,"column":56,"offset":9333},"end":{"line":348,"column":67,"offset":9344},"indent":[]}}],"position":{"start":{"line":348,"column":1,"offset":9278},"end":{"line":348,"column":67,"offset":9344},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"---\ntitle: Post 1\nembeddedImages:\n  - markus-spiske-FXFz-sW0uwo-unsplash.jpg\n---","position":{"start":{"line":351,"column":1,"offset":9347},"end":{"line":357,"column":4,"offset":9445},"indent":[1,1,1,1,1,1]}},{"type":"jsx","value":"<Divider />","position":{"start":{"line":358,"column":1,"offset":9446},"end":{"line":358,"column":12,"offset":9457},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can then use the ","position":{"start":{"line":360,"column":1,"offset":9459},"end":{"line":360,"column":22,"offset":9480},"indent":[]}},{"type":"inlineCode","value":"<EmbeddedImage />","position":{"start":{"line":360,"column":22,"offset":9480},"end":{"line":360,"column":41,"offset":9499},"indent":[]}},{"type":"text","value":" component like this in your ","position":{"start":{"line":360,"column":41,"offset":9499},"end":{"line":360,"column":70,"offset":9528},"indent":[]}},{"type":"inlineCode","value":".mdx","position":{"start":{"line":360,"column":70,"offset":9528},"end":{"line":360,"column":76,"offset":9534},"indent":[]}},{"type":"text","value":". ","position":{"start":{"line":360,"column":76,"offset":9534},"end":{"line":360,"column":78,"offset":9536},"indent":[]}}],"position":{"start":{"line":360,"column":1,"offset":9459},"end":{"line":360,"column":78,"offset":9536},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":362,"column":1,"offset":9538},"end":{"line":362,"column":5,"offset":9542},"indent":[]}},{"type":"inlineCode","value":"image1","position":{"start":{"line":362,"column":5,"offset":9542},"end":{"line":362,"column":13,"offset":9550},"indent":[]}},{"type":"text","value":" object key refers to the position in the ","position":{"start":{"line":362,"column":13,"offset":9550},"end":{"line":362,"column":55,"offset":9592},"indent":[]}},{"type":"inlineCode","value":"embeddedImages","position":{"start":{"line":362,"column":55,"offset":9592},"end":{"line":362,"column":71,"offset":9608},"indent":[]}},{"type":"text","value":" list in frontmatter","position":{"start":{"line":362,"column":71,"offset":9608},"end":{"line":362,"column":91,"offset":9628},"indent":[]}}],"position":{"start":{"line":362,"column":1,"offset":9538},"end":{"line":362,"column":91,"offset":9628},"indent":[]}},{"type":"jsx","value":"<Divider />","position":{"start":{"line":364,"column":1,"offset":9630},"end":{"line":364,"column":12,"offset":9641},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi\n\n<EmbeddedImage src={props.embedded.image1} />","position":{"start":{"line":366,"column":1,"offset":9643},"end":{"line":370,"column":4,"offset":9770},"indent":[1,1,1,1]}},{"type":"jsx","value":"<Divider />","position":{"start":{"line":372,"column":1,"offset":9772},"end":{"line":372,"column":12,"offset":9783},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"link","title":null,"url":"#source-words","children":[{"type":"text","value":"SourceWords","position":{"start":{"line":374,"column":5,"offset":9789},"end":{"line":374,"column":16,"offset":9800},"indent":[]}}],"position":{"start":{"line":374,"column":4,"offset":9788},"end":{"line":374,"column":32,"offset":9816},"indent":[]}}],"position":{"start":{"line":374,"column":1,"offset":9785},"end":{"line":374,"column":32,"offset":9816},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"By default source words returns a word count for all words found in the ","position":{"start":{"line":376,"column":1,"offset":9818},"end":{"line":376,"column":73,"offset":9890},"indent":[]}},{"type":"inlineCode","value":".mdx","position":{"start":{"line":376,"column":73,"offset":9890},"end":{"line":376,"column":79,"offset":9896},"indent":[]}},{"type":"text","value":" sourced from the directories defined in `gatsby-config.js.","position":{"start":{"line":376,"column":79,"offset":9896},"end":{"line":376,"column":138,"offset":9955},"indent":[]}}],"position":{"start":{"line":376,"column":1,"offset":9818},"end":{"line":376,"column":138,"offset":9955},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can also use the ","position":{"start":{"line":378,"column":1,"offset":9957},"end":{"line":378,"column":22,"offset":9978},"indent":[]}},{"type":"inlineCode","value":"filter","position":{"start":{"line":378,"column":22,"offset":9978},"end":{"line":378,"column":30,"offset":9986},"indent":[]}},{"type":"text","value":" prop with this component eg: ","position":{"start":{"line":378,"column":30,"offset":9986},"end":{"line":378,"column":60,"offset":10016},"indent":[]}},{"type":"inlineCode","value":"<SourceTags filter='posts' />","position":{"start":{"line":378,"column":60,"offset":10016},"end":{"line":378,"column":91,"offset":10047},"indent":[]}}],"position":{"start":{"line":378,"column":1,"offset":9957},"end":{"line":378,"column":91,"offset":10047},"indent":[]}},{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"NOTE:","position":{"start":{"line":380,"column":2,"offset":10050},"end":{"line":380,"column":7,"offset":10055},"indent":[]}}],"position":{"start":{"line":380,"column":1,"offset":10049},"end":{"line":380,"column":8,"offset":10056},"indent":[]}},{"type":"text","value":" the ","position":{"start":{"line":380,"column":8,"offset":10056},"end":{"line":380,"column":13,"offset":10061},"indent":[]}},{"type":"inlineCode","value":"filter","position":{"start":{"line":380,"column":13,"offset":10061},"end":{"line":380,"column":21,"offset":10069},"indent":[]}},{"type":"text","value":" source ","position":{"start":{"line":380,"column":21,"offset":10069},"end":{"line":380,"column":29,"offset":10077},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"must","position":{"start":{"line":380,"column":30,"offset":10078},"end":{"line":380,"column":34,"offset":10082},"indent":[]}}],"position":{"start":{"line":380,"column":29,"offset":10077},"end":{"line":380,"column":35,"offset":10083},"indent":[]}},{"type":"text","value":" be one from your `gatsby-config.js``","position":{"start":{"line":380,"column":35,"offset":10083},"end":{"line":380,"column":72,"offset":10120},"indent":[]}}],"position":{"start":{"line":380,"column":1,"offset":10049},"end":{"line":380,"column":72,"offset":10120},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"<SourceWords>\n    {source => {\n      const {\n        wordCountTotal,\n        wordCountAverage,\n        wordCountHighest,\n        wordCountLowest,\n        timeToReadTotal,\n        timeToReadAverage,\n      } = source\n      return (\n          <Box\n            sx={{\n              display: 'flex',\n              flex: '1 1 auto',\n              flexDirection: 'column',\n              mb: 3,\n              px: 2,\n              width: ['100%', '50%', '33.333333333%'],\n            }}\n          >\n            <Flex\n              sx={{\n                alignItems: 'center',\n                backgroundColor: 'surface',\n                flex: '1 1 auto',\n                flexDirection: 'column',\n                justifyContent: 'center',\n                p: 3,\n                position: 'relative',\n              }}\n            >\n              <Heading as=\"h4\" variant=\"styles.h4\">\n                Average word count\n              </Heading>\n              <Donut\n                sx={{ mx: 3, mb: 2 }}\n                value={wordCountAverage / wordCountTotal}\n              />\n              <Box sx={{ position: 'absolute' }}>\n                <Text\n                  sx={{\n                    textAlign: 'center',\n                    color: 'primary',\n                    fontSize: '22px',\n                    fontWeight: 'bold',\n                    lineHeight: '1',\n                  }}\n                >\n                  {wordCountAverage}\n                </Text>\n                <Text sx={{ textAlign: 'center', color: 'primary', lineHeight: '1' }}>\n                  Words\n                </Text>\n              </Box>\n              <Text\n                sx={{ textAlign: 'center' }}\n              >{`Total words: ${wordCountTotal}`}</Text>\n            </Flex>\n          </Box>\n        )\n      }}\n  </SourceWords>","position":{"start":{"line":382,"column":1,"offset":10122},"end":{"line":446,"column":4,"offset":11943},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"<SourceWords>\n    {source => {\n      const {\n        wordCountTotal,\n        wordCountAverage,\n        wordCountHighest,\n        wordCountLowest,\n        timeToReadTotal,\n        timeToReadAverage,\n      } = source\n      return (\n        <Flex\n          sx={{\n            flexWrap: 'wrap',\n            mx: theme => `-${theme.space[2]}px`,\n          }}\n        >\n          <Box\n            sx={{\n              display: 'flex',\n              flex: '1 1 auto',\n              flexDirection: 'column',\n              mb: 3,\n              px: 2,\n              width: ['100%', '50%', '33.333333333%'],\n            }}\n          >\n            <Flex\n              sx={{\n                alignItems: 'center',\n                backgroundColor: 'surface',\n                flex: '1 1 auto',\n                flexDirection: 'column',\n                justifyContent: 'center',\n                p: 3,\n                position: 'relative',\n              }}\n            >\n              <Heading as=\"h4\" variant=\"styles.h4\">\n                Average word count\n              </Heading>\n              <Donut\n                sx={{ mx: 3, mb: 2 }}\n                value={wordCountAverage / wordCountTotal}\n              />\n              <Box sx={{ position: 'absolute' }}>\n                <Text\n                  sx={{\n                    textAlign: 'center',\n                    color: 'primary',\n                    fontSize: '22px',\n                    fontWeight: 'bold',\n                    lineHeight: '1',\n                  }}\n                >\n                  {wordCountAverage}\n                </Text>\n                <Text sx={{ textAlign: 'center', color: 'primary', lineHeight: '1' }}>\n                  Words\n                </Text>\n              </Box>\n              <Text\n                sx={{ textAlign: 'center' }}\n              >{`Total words: ${wordCountTotal}`}</Text>\n            </Flex>\n          </Box>\n          <Box\n            sx={{\n              display: 'flex',\n              flex: '1 1 auto',\n              flexDirection: 'column',\n              mb: 3,\n              px: 2,\n              width: ['100%', '50%', '33.333333333%'],\n            }}\n          >\n            <Flex\n              sx={{\n                alignItems: 'center',\n                backgroundColor: 'surface',\n                flex: '1 1 auto',\n                flexDirection: 'column',\n                justifyContent: 'center',\n                p: 3,\n                position: 'relative',\n              }}\n            >\n              <Heading as=\"h4\" variant=\"styles.h4\">\n                Average time to read\n              </Heading>\n              <Donut\n                variant=\"styles.donut.secondary\"\n                sx={{ mx: 3, mb: 2 }}\n                value={timeToReadAverage / timeToReadTotal}\n              />\n              <Box sx={{ position: 'absolute' }}>\n                <Text\n                  sx={{\n                    textAlign: 'center',\n                    color: 'secondary',\n                    fontSize: '20px',\n                    fontWeight: 'bold',\n                    lineHeight: '1',\n                  }}\n                >\n                  {timeToReadAverage}\n                </Text>\n                <Text\n                  sx={{ textAlign: 'center', color: 'secondary', lineHeight: '1' }}\n                >\n                  Minute\n                </Text>\n              </Box>\n              <Text\n                sx={{ textAlign: 'center' }}\n              >{`Total read time: ${timeToReadTotal} mins`}</Text>\n            </Flex>\n          </Box>\n          <Box\n            sx={{\n              display: 'flex',\n              flex: '1 1 auto',\n              flexDirection: 'column',\n              mb: 3,\n              px: 2,\n              width: ['100%', '50%', '33.333333333%'],\n            }}\n          >\n            <Flex\n              sx={{\n                alignItems: 'center',\n                backgroundColor: 'surface',\n                flex: '1 1 auto',\n                flexDirection: 'column',\n                justifyContent: 'center',\n                p: 3,\n                position: 'relative',\n              }}\n            >\n              <Heading as=\"h4\" variant=\"styles.h4\">\n                Highest word count\n              </Heading>\n              <Donut\n                variant=\"styles.donut.success\"\n                sx={{ mx: 3, mb: 2 }}\n                value={wordCountHighest / wordCountTotal}\n              />\n              <Box sx={{ position: 'absolute' }}>\n                <Text\n                  sx={{\n                    textAlign: 'center',\n                    color: 'success',\n                    fontSize: '20px',\n                    fontWeight: 'bold',\n                    lineHeight: '1',\n                  }}\n                >\n                  {wordCountHighest}\n                </Text>\n                <Text sx={{ textAlign: 'center', color: 'success', lineHeight: '1' }}>\n                  Words\n                </Text>\n              </Box>\n              <Text\n                sx={{ textAlign: 'center' }}\n              >{`Total words: ${wordCountTotal}`}</Text>\n            </Flex>\n          </Box>\n        </Flex>\n      )\n    }}\n  </SourceWords>","position":{"start":{"line":448,"column":1,"offset":11945},"end":{"line":619,"column":17,"offset":17119},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"<Divider />","position":{"start":{"line":621,"column":1,"offset":17121},"end":{"line":621,"column":12,"offset":17132},"indent":[]}},{"type":"code","lang":"javascript","meta":null,"value":"<SourceWords>\n  {sourceWords => {\n    const currentYear = sourceWords.wordCountByMonth[sourceWords.wordCountByMonth.length - 1]\n    return (\n      <Box sx={{ backgroundColor: 'surface', p: 3 }}>\n        <Flex>\n        <Heading variant=\"styles.h4\" sx={{mr: 2}}>{currentYear[0].year}</Heading>\n        <Text>Word count by month</Text>\n        </Flex>\n        <Box sx={{ display: 'flex', flex: '1 1 auto', height: 300 }}>\n          <Flex sx={{ flexWrap: 'wrap', width: '100%' }}>\n            {currentYear.map((month, index) => {\n              const { initial, words } = month\n              return (\n                <Box\n                  key={index}\n                  sx={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    justifyContent: 'flex-end',\n                    pl: 1,\n                    pr: 1,\n                    width: `${100 / currentYear.length}%`,\n                  }}\n                >\n                 <Text\n                    sx={{\n                      textAlign: 'center',\n                    }}\n                  >\n                    {`x${words}`}\n                  </Text>\n                  <Box\n                    sx={{\n                      backgroundColor: 'primary',\n                      height: `${words}%`,\n                      p: 1,\n                    }}\n                  />\n                  <Text\n                    sx={{\n                      textTransform: 'uppercase',\n                      textAlign: 'center',\n                    }}\n                  >\n                    {initial}\n                  </Text>\n                </Box>\n              )\n            })}\n          </Flex>\n        </Box>\n      </Box>\n    )\n  }}\n</SourceWords>","position":{"start":{"line":623,"column":1,"offset":17134},"end":{"line":680,"column":4,"offset":18882},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"<SourceWords>\n  {sourceWords => {\n    const currentYear = sourceWords.wordCountByMonth[sourceWords.wordCountByMonth.length - 1]\n    return (\n      <Box sx={{ backgroundColor: 'surface', p: 3 }}>\n        <Flex>\n        <Heading variant=\"styles.h4\" sx={{mr: 2}}>{currentYear[0].year}</Heading>\n        <Text>Word count by month</Text>\n        </Flex>\n        <Box sx={{ display: 'flex', flex: '1 1 auto', height: 300 }}>\n          <Flex sx={{ flexWrap: 'wrap', width: '100%' }}>\n            {currentYear.map((month, index) => {\n              const { initial, words } = month\n              return (\n                <Box\n                  key={index}\n                  sx={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    justifyContent: 'flex-end',\n                    pl: 1,\n                    pr: 1,\n                    width: `${100 / currentYear.length}%`,\n                  }}\n                >\n                 <Text\n                    sx={{\n                      textAlign: 'center',\n                    }}\n                  >\n                    {`x${words}`}\n                  </Text>\n                  <Box\n                    sx={{\n                      backgroundColor: 'primary',\n                      height: `${words}%`,\n                      p: 1,\n                    }}\n                  />\n                  <Text\n                    sx={{\n                      textTransform: 'uppercase',\n                      textAlign: 'center',\n                    }}\n                  >\n                    {initial}\n                  </Text>\n                </Box>\n              )\n            })}\n          </Flex>\n        </Box>\n      </Box>\n    )\n  }}\n</SourceWords>","position":{"start":{"line":682,"column":1,"offset":18884},"end":{"line":737,"column":15,"offset":20614},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":739,"column":1,"offset":20616},"end":{"line":739,"column":31,"offset":20646},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":739,"column":31,"offset":20646}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/vassagovon/myProject/venv3/Github/BLOG/node_modules/@pauliescanlon/gatsby-theme-terminal/src/layouts/PageLayout.js\"\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\nconst SiteMetaData = makeShortcode(\"SiteMetaData\");\nconst Divider = makeShortcode(\"Divider\");\nconst SourceList = makeShortcode(\"SourceList\");\nconst SourceDays = makeShortcode(\"SourceDays\");\nconst Box = makeShortcode(\"Box\");\nconst Flex = makeShortcode(\"Flex\");\nconst Text = makeShortcode(\"Text\");\nconst SourceMonths = makeShortcode(\"SourceMonths\");\nconst Heading = makeShortcode(\"Heading\");\nconst SourceTags = makeShortcode(\"SourceTags\");\nconst SourceWords = makeShortcode(\"SourceWords\");\nconst Donut = makeShortcode(\"Donut\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1><a parentName=\"h1\" {...{\n        \"href\": \"#-gatsby-theme-terminal\"\n      }}>{`gatsby-theme-terminal`}</a></h1>\n    <p>{`gatsby-theme-terminal has some of it's own components, and below is how you use them.`}</p>\n    <h2><a parentName=\"h2\" {...{\n        \"href\": \"#site-meta-data\"\n      }}>{`SiteMetaData`}</a></h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`<SiteMetaData />`}</inlineCode>{` component returns all fields specified by `}<inlineCode parentName=\"p\">{`siteMetadata`}</inlineCode>{` in `}<inlineCode parentName=\"p\">{`gatsby-config.js`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`<SiteMetaData>\n  {siteMetadata => {\n    const { name, description } = siteMetadata\n    return (\n      <ul>\n        <li>{name}</li>\n        <li>{description}</li>\n      </ul>\n    )\n  }}\n</SiteMetaData>\n`}</code></pre>\n    <SiteMetaData mdxType=\"SiteMetaData\">\n      {siteMetadata => {\n        const {\n          name,\n          description\n        } = siteMetadata;\n        return <ul>\n        <li>{name}</li>\n        <li>{description}</li>\n      </ul>;\n      }}\n    </SiteMetaData>\n    <Divider mdxType=\"Divider\" />\n    <h2><a parentName=\"h2\" {...{\n        \"href\": \"#source-list\"\n      }}>{`SourceList`}</a></h2>\n    <p>{`By default the source list returns all `}<inlineCode parentName=\"p\">{`.mdx`}</inlineCode>{` found from the directories defined in `}<inlineCode parentName=\"p\">{`gatsby-config.js`}</inlineCode>{`. You can also use the `}<inlineCode parentName=\"p\">{`filter`}</inlineCode>{` prop with this component eg: `}<inlineCode parentName=\"p\">{`<SourceList filter='posts' />`}</inlineCode></p>\n    <p><em parentName=\"p\">{`NOTE:`}</em>{` the `}<inlineCode parentName=\"p\">{`filter`}</inlineCode>{` source `}<em parentName=\"p\">{`must`}</em>{` be one from your `}<inlineCode parentName=\"p\">{`gatsby-config.js`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`<SourceList>\n  {source => (\n    <ul>\n      {source.map((edge, index) => {\n        const {\n          frontmatter: { title },\n        } = edge.node\n        return <li key={index}>{title}</li>\n      })}\n    </ul>\n  )}\n</SourceList>\n`}</code></pre>\n    <SourceList mdxType=\"SourceList\">\n  {source => <ul>\n      {source.map((edge, index) => {\n          const {\n            frontmatter: {\n              title\n            }\n          } = edge.node;\n          return <li key={index}>{title}</li>;\n        })}\n    </ul>}\n    </SourceList>\n    <Divider mdxType=\"Divider\" />\n    <h2><a parentName=\"h2\" {...{\n        \"href\": \"#source-days\"\n      }}>{`SourceDays`}</a></h2>\n    <p>{`By default source days returns an accumulated count and percent of all `}<inlineCode parentName=\"p\">{`frontmatter`}</inlineCode>{` date fields grouped by year. You can also use the `}<inlineCode parentName=\"p\">{`filter`}</inlineCode>{` prop with this component eg: `}<inlineCode parentName=\"p\">{`<SourceDays filter='posts' />`}</inlineCode></p>\n    <p><em parentName=\"p\">{`NOTE:`}</em>{` the `}<inlineCode parentName=\"p\">{`filter`}</inlineCode>{` source `}<em parentName=\"p\">{`must`}</em>{` be one from your `}<inlineCode parentName=\"p\">{`gatsby-config.js`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`<SourceDays>\n  {sourceDays => {\n    const currentYear = sourceDays[sourceDays.length - 1]\n    return (\n       <Box>\n        {currentYear.map((day, index) => {\n          const { name, count, percent } = day\n          return (\n            <Flex\n              key={index}\n              sx={{\n                backgroundColor: 'surface',\n                flexDirection: 'column',\n                mb: 2,\n                position: 'relative',\n              }}\n            >\n              <Box\n                sx={{\n                  backgroundColor: 'primary',\n                  height: '100%',\n                  position: 'absolute',\n                  width: \\`\\${percent}%\\`,\n                }}\n              />\n              <Box\n                sx={{\n                  position: 'relative',\n                  display: 'flex',\n                  justifyContent: 'space-between',\n                }}\n              >\n                <Text sx={{ textTransform: 'capitalize', pl: 2 }}>\n                  {name}\n                </Text>\n                <Text sx={{ pr: 2 }}>{\\`x\\${count}\\`}</Text>\n              </Box>\n            </Flex>\n          )\n        })}\n      </Box>\n    )\n  }}\n</SourceDays>\n`}</code></pre>\n    <SourceDays mdxType=\"SourceDays\">\n  {sourceDays => {\n        const currentYear = sourceDays[sourceDays.length - 1];\n        return <Box mdxType=\"Box\">\n        {currentYear.map((day, index) => {\n            const {\n              name,\n              count,\n              percent\n            } = day;\n            return <Flex key={index} sx={{\n              backgroundColor: 'surface',\n              flexDirection: 'column',\n              mb: 2,\n              position: 'relative'\n            }} mdxType=\"Flex\">\n              <Box sx={{\n                backgroundColor: 'primary',\n                height: '100%',\n                position: 'absolute',\n                width: `${percent}%`\n              }} mdxType=\"Box\" />\n              <Box sx={{\n                position: 'relative',\n                display: 'flex',\n                justifyContent: 'space-between'\n              }} mdxType=\"Box\">\n                <Text sx={{\n                  textTransform: 'capitalize',\n                  pl: 2\n                }} mdxType=\"Text\">\n                  {name}\n                </Text>\n                <Text sx={{\n                  pr: 2\n                }} mdxType=\"Text\">{`x${count}`}</Text>\n              </Box>\n            </Flex>;\n          })}\n      </Box>;\n      }}\n    </SourceDays>\n    <Divider mdxType=\"Divider\" />\n    <h2><a parentName=\"h2\" {...{\n        \"href\": \"#source-months\"\n      }}>{`SourceMonths`}</a></h2>\n    <p>{`By default source months returns an accumulated count and percent of all `}<inlineCode parentName=\"p\">{`frontmatter`}</inlineCode>{` date fields grouped by year. You can also use the `}<inlineCode parentName=\"p\">{`filter`}</inlineCode>{` prop with this component eg: `}<inlineCode parentName=\"p\">{`<SourceMonths filter='posts' />`}</inlineCode></p>\n    <p><em parentName=\"p\">{`NOTE:`}</em>{` the `}<inlineCode parentName=\"p\">{`filter`}</inlineCode>{` source `}<em parentName=\"p\">{`must`}</em>{` be one from your `}<inlineCode parentName=\"p\">{`gatsby-config.js`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`<SourceMonths>\n  {sourceMonths => {\n    const currentYear = sourceMonths[sourceMonths.length - 1]\n    return (\n      <Box sx={{ backgroundColor: 'surface', p: 3 }}>\n        <Heading variant=\"styles.h4\">{currentYear[0].year}</Heading>\n        <Box sx={{ display: 'flex', flex: '1 1 auto', height: 300 }}>\n          <Flex sx={{ flexWrap: 'wrap', width: '100%' }}>\n            {currentYear.map((month, index) => {\n              const { initial, count, percent } = month\n              return (\n                <Box\n                  key={index}\n                  sx={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    justifyContent: 'flex-end',\n                    pl: 1,\n                    pr: 1,\n                    width: \\`\\${100 / currentYear.length}%\\`,\n                  }}\n                >\n                 <Text\n                    sx={{\n                      textAlign: 'center',\n                    }}\n                  >\n                    {\\`x\\${count}\\`}\n                  </Text>\n                  <Box\n                    sx={{\n                      backgroundColor: 'primary',\n                      height: \\`\\${percent}%\\`,\n                      p: 1,\n                    }}\n                  />\n                  <Text\n                    sx={{\n                      textTransform: 'uppercase',\n                      textAlign: 'center',\n                    }}\n                  >\n                    {initial}\n                  </Text>\n                </Box>\n              )\n            })}\n          </Flex>\n        </Box>\n      </Box>\n    )\n  }}\n</SourceMonths>\n`}</code></pre>\n    <SourceMonths mdxType=\"SourceMonths\">\n  {sourceMonths => {\n        const currentYear = sourceMonths[sourceMonths.length - 1];\n        return <Box sx={{\n          backgroundColor: 'surface',\n          p: 3\n        }} mdxType=\"Box\">\n        <Heading variant=\"styles.h4\" mdxType=\"Heading\">{currentYear[0].year}</Heading>\n        <Box sx={{\n            display: 'flex',\n            flex: '1 1 auto',\n            height: 300\n          }} mdxType=\"Box\">\n          <Flex sx={{\n              flexWrap: 'wrap',\n              width: '100%'\n            }} mdxType=\"Flex\">\n            {currentYear.map((month, index) => {\n                const {\n                  initial,\n                  count,\n                  percent\n                } = month;\n                return <Box key={index} sx={{\n                  display: 'flex',\n                  flexDirection: 'column',\n                  justifyContent: 'flex-end',\n                  pl: 1,\n                  pr: 1,\n                  width: `${100 / currentYear.length}%`\n                }} mdxType=\"Box\">\n                 <Text sx={{\n                    textAlign: 'center'\n                  }} mdxType=\"Text\">\n                    {`x${count}`}\n                  </Text>\n                  <Box sx={{\n                    backgroundColor: 'primary',\n                    height: `${percent}%`,\n                    p: 1\n                  }} mdxType=\"Box\" />\n                  <Text sx={{\n                    textTransform: 'uppercase',\n                    textAlign: 'center'\n                  }} mdxType=\"Text\">\n                    {initial}\n                  </Text>\n                </Box>;\n              })}\n          </Flex>\n        </Box>\n      </Box>;\n      }}\n    </SourceMonths>\n    <Divider mdxType=\"Divider\" />\n    <h2><a parentName=\"h2\" {...{\n        \"href\": \"#tag-list\"\n      }}>{`SourceTags`}</a></h2>\n    <p>{`By default source tags returns all tags found in the `}<inlineCode parentName=\"p\">{`.mdx`}</inlineCode>{` sourced from the directories defined in \\`gatsby-config.js.`}</p>\n    <p>{`You can also use the `}<inlineCode parentName=\"p\">{`filter`}</inlineCode>{` prop with this component eg: `}<inlineCode parentName=\"p\">{`<SourceTags filter='posts' />`}</inlineCode></p>\n    <p><em parentName=\"p\">{`NOTE:`}</em>{` the `}<inlineCode parentName=\"p\">{`filter`}</inlineCode>{` source `}<em parentName=\"p\">{`must`}</em>{` be one from your \\`gatsby-config.js\\`\\``}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`<SourceTags>\n  {source => (\n    <Flex\n    sx={{flexDirection: 'column'}}\n    >\n      {\n        source.map((tag, index) => {\n          const {name, count, percent} = tag\n          return (<Box  key={index}>\n            {\\`\\${name}  x\\${count}\\`}\n            <Box mb={2}  bg='muted' sx={{width: \\`\\${percent}%\\`, height: 4}} />\n          </Box>\n        })\n      }\n    </Flex>\n  )}\n</SourceTags>\n`}</code></pre>\n    <SourceTags mdxType=\"SourceTags\">\n  {source => <Flex sx={{\n        flexDirection: 'column'\n      }} mdxType=\"Flex\">\n      {source.map((tag, index) => {\n          const {\n            name,\n            count,\n            percent\n          } = tag;\n          return <Box key={index} mdxType=\"Box\">\n            {`${name}  x${count}`}\n            <Box mb={2} bg='muted' sx={{\n              width: `${percent}%`,\n              height: 4\n            }} mdxType=\"Box\"></Box>\n          </Box>;\n        })}\n    </Flex>}\n    </SourceTags>\n    <Divider mdxType=\"Divider\" />\n    <h2><a parentName=\"h2\" {...{\n        \"href\": \"#embedded-images\"\n      }}>{`embeddedImages`}</a></h2>\n    <p>{`Using a frontmatter field called `}<inlineCode parentName=\"p\">{`embeddedImages`}</inlineCode>{` you can define a `}<em parentName=\"p\">{`list`}</em>{` of locally sourced images to embed in the `}<inlineCode parentName=\"p\">{`.mdx`}</inlineCode>{` body. `}</p>\n    <p><em parentName=\"p\">{`NOTE:`}</em>{` this method won't work for `}<inlineCode parentName=\"p\">{`.mdx`}</inlineCode>{` sourced from `}<inlineCode parentName=\"p\">{`src/pages`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`---\ntitle: Post 1\nembeddedImages:\n  - markus-spiske-FXFz-sW0uwo-unsplash.jpg\n---\n`}</code></pre>\n    <Divider mdxType=\"Divider\" />\n    <p>{`You can then use the `}<inlineCode parentName=\"p\">{`<EmbeddedImage />`}</inlineCode>{` component like this in your `}<inlineCode parentName=\"p\">{`.mdx`}</inlineCode>{`. `}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`image1`}</inlineCode>{` object key refers to the position in the `}<inlineCode parentName=\"p\">{`embeddedImages`}</inlineCode>{` list in frontmatter`}</p>\n    <Divider mdxType=\"Divider\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi\n\n<EmbeddedImage src={props.embedded.image1} />\n`}</code></pre>\n    <Divider mdxType=\"Divider\" />\n    <h2><a parentName=\"h2\" {...{\n        \"href\": \"#source-words\"\n      }}>{`SourceWords`}</a></h2>\n    <p>{`By default source words returns a word count for all words found in the `}<inlineCode parentName=\"p\">{`.mdx`}</inlineCode>{` sourced from the directories defined in \\`gatsby-config.js.`}</p>\n    <p>{`You can also use the `}<inlineCode parentName=\"p\">{`filter`}</inlineCode>{` prop with this component eg: `}<inlineCode parentName=\"p\">{`<SourceTags filter='posts' />`}</inlineCode></p>\n    <p><em parentName=\"p\">{`NOTE:`}</em>{` the `}<inlineCode parentName=\"p\">{`filter`}</inlineCode>{` source `}<em parentName=\"p\">{`must`}</em>{` be one from your \\`gatsby-config.js\\`\\``}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`<SourceWords>\n    {source => {\n      const {\n        wordCountTotal,\n        wordCountAverage,\n        wordCountHighest,\n        wordCountLowest,\n        timeToReadTotal,\n        timeToReadAverage,\n      } = source\n      return (\n          <Box\n            sx={{\n              display: 'flex',\n              flex: '1 1 auto',\n              flexDirection: 'column',\n              mb: 3,\n              px: 2,\n              width: ['100%', '50%', '33.333333333%'],\n            }}\n          >\n            <Flex\n              sx={{\n                alignItems: 'center',\n                backgroundColor: 'surface',\n                flex: '1 1 auto',\n                flexDirection: 'column',\n                justifyContent: 'center',\n                p: 3,\n                position: 'relative',\n              }}\n            >\n              <Heading as=\"h4\" variant=\"styles.h4\">\n                Average word count\n              </Heading>\n              <Donut\n                sx={{ mx: 3, mb: 2 }}\n                value={wordCountAverage / wordCountTotal}\n              />\n              <Box sx={{ position: 'absolute' }}>\n                <Text\n                  sx={{\n                    textAlign: 'center',\n                    color: 'primary',\n                    fontSize: '22px',\n                    fontWeight: 'bold',\n                    lineHeight: '1',\n                  }}\n                >\n                  {wordCountAverage}\n                </Text>\n                <Text sx={{ textAlign: 'center', color: 'primary', lineHeight: '1' }}>\n                  Words\n                </Text>\n              </Box>\n              <Text\n                sx={{ textAlign: 'center' }}\n              >{\\`Total words: \\${wordCountTotal}\\`}</Text>\n            </Flex>\n          </Box>\n        )\n      }}\n  </SourceWords>\n`}</code></pre>\n    <SourceWords mdxType=\"SourceWords\">\n    {source => {\n        const {\n          wordCountTotal,\n          wordCountAverage,\n          wordCountHighest,\n          wordCountLowest,\n          timeToReadTotal,\n          timeToReadAverage\n        } = source;\n        return <Flex sx={{\n          flexWrap: 'wrap',\n          mx: theme => `-${theme.space[2]}px`\n        }} mdxType=\"Flex\">\n          <Box sx={{\n            display: 'flex',\n            flex: '1 1 auto',\n            flexDirection: 'column',\n            mb: 3,\n            px: 2,\n            width: ['100%', '50%', '33.333333333%']\n          }} mdxType=\"Box\">\n            <Flex sx={{\n              alignItems: 'center',\n              backgroundColor: 'surface',\n              flex: '1 1 auto',\n              flexDirection: 'column',\n              justifyContent: 'center',\n              p: 3,\n              position: 'relative'\n            }} mdxType=\"Flex\">\n              <Heading as=\"h4\" variant=\"styles.h4\" mdxType=\"Heading\">\n                Average word count\n              </Heading>\n              <Donut sx={{\n                mx: 3,\n                mb: 2\n              }} value={wordCountAverage / wordCountTotal} mdxType=\"Donut\" />\n              <Box sx={{\n                position: 'absolute'\n              }} mdxType=\"Box\">\n                <Text sx={{\n                  textAlign: 'center',\n                  color: 'primary',\n                  fontSize: '22px',\n                  fontWeight: 'bold',\n                  lineHeight: '1'\n                }} mdxType=\"Text\">\n                  {wordCountAverage}\n                </Text>\n                <Text sx={{\n                  textAlign: 'center',\n                  color: 'primary',\n                  lineHeight: '1'\n                }} mdxType=\"Text\">\n                  Words\n                </Text>\n              </Box>\n              <Text sx={{\n                textAlign: 'center'\n              }} mdxType=\"Text\">{`Total words: ${wordCountTotal}`}</Text>\n            </Flex>\n          </Box>\n          <Box sx={{\n            display: 'flex',\n            flex: '1 1 auto',\n            flexDirection: 'column',\n            mb: 3,\n            px: 2,\n            width: ['100%', '50%', '33.333333333%']\n          }} mdxType=\"Box\">\n            <Flex sx={{\n              alignItems: 'center',\n              backgroundColor: 'surface',\n              flex: '1 1 auto',\n              flexDirection: 'column',\n              justifyContent: 'center',\n              p: 3,\n              position: 'relative'\n            }} mdxType=\"Flex\">\n              <Heading as=\"h4\" variant=\"styles.h4\" mdxType=\"Heading\">\n                Average time to read\n              </Heading>\n              <Donut variant=\"styles.donut.secondary\" sx={{\n                mx: 3,\n                mb: 2\n              }} value={timeToReadAverage / timeToReadTotal} mdxType=\"Donut\" />\n              <Box sx={{\n                position: 'absolute'\n              }} mdxType=\"Box\">\n                <Text sx={{\n                  textAlign: 'center',\n                  color: 'secondary',\n                  fontSize: '20px',\n                  fontWeight: 'bold',\n                  lineHeight: '1'\n                }} mdxType=\"Text\">\n                  {timeToReadAverage}\n                </Text>\n                <Text sx={{\n                  textAlign: 'center',\n                  color: 'secondary',\n                  lineHeight: '1'\n                }} mdxType=\"Text\">\n                  Minute\n                </Text>\n              </Box>\n              <Text sx={{\n                textAlign: 'center'\n              }} mdxType=\"Text\">{`Total read time: ${timeToReadTotal} mins`}</Text>\n            </Flex>\n          </Box>\n          <Box sx={{\n            display: 'flex',\n            flex: '1 1 auto',\n            flexDirection: 'column',\n            mb: 3,\n            px: 2,\n            width: ['100%', '50%', '33.333333333%']\n          }} mdxType=\"Box\">\n            <Flex sx={{\n              alignItems: 'center',\n              backgroundColor: 'surface',\n              flex: '1 1 auto',\n              flexDirection: 'column',\n              justifyContent: 'center',\n              p: 3,\n              position: 'relative'\n            }} mdxType=\"Flex\">\n              <Heading as=\"h4\" variant=\"styles.h4\" mdxType=\"Heading\">\n                Highest word count\n              </Heading>\n              <Donut variant=\"styles.donut.success\" sx={{\n                mx: 3,\n                mb: 2\n              }} value={wordCountHighest / wordCountTotal} mdxType=\"Donut\" />\n              <Box sx={{\n                position: 'absolute'\n              }} mdxType=\"Box\">\n                <Text sx={{\n                  textAlign: 'center',\n                  color: 'success',\n                  fontSize: '20px',\n                  fontWeight: 'bold',\n                  lineHeight: '1'\n                }} mdxType=\"Text\">\n                  {wordCountHighest}\n                </Text>\n                <Text sx={{\n                  textAlign: 'center',\n                  color: 'success',\n                  lineHeight: '1'\n                }} mdxType=\"Text\">\n                  Words\n                </Text>\n              </Box>\n              <Text sx={{\n                textAlign: 'center'\n              }} mdxType=\"Text\">{`Total words: ${wordCountTotal}`}</Text>\n            </Flex>\n          </Box>\n        </Flex>;\n      }}\n  </SourceWords>\n    <Divider mdxType=\"Divider\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`<SourceWords>\n  {sourceWords => {\n    const currentYear = sourceWords.wordCountByMonth[sourceWords.wordCountByMonth.length - 1]\n    return (\n      <Box sx={{ backgroundColor: 'surface', p: 3 }}>\n        <Flex>\n        <Heading variant=\"styles.h4\" sx={{mr: 2}}>{currentYear[0].year}</Heading>\n        <Text>Word count by month</Text>\n        </Flex>\n        <Box sx={{ display: 'flex', flex: '1 1 auto', height: 300 }}>\n          <Flex sx={{ flexWrap: 'wrap', width: '100%' }}>\n            {currentYear.map((month, index) => {\n              const { initial, words } = month\n              return (\n                <Box\n                  key={index}\n                  sx={{\n                    display: 'flex',\n                    flexDirection: 'column',\n                    justifyContent: 'flex-end',\n                    pl: 1,\n                    pr: 1,\n                    width: \\`\\${100 / currentYear.length}%\\`,\n                  }}\n                >\n                 <Text\n                    sx={{\n                      textAlign: 'center',\n                    }}\n                  >\n                    {\\`x\\${words}\\`}\n                  </Text>\n                  <Box\n                    sx={{\n                      backgroundColor: 'primary',\n                      height: \\`\\${words}%\\`,\n                      p: 1,\n                    }}\n                  />\n                  <Text\n                    sx={{\n                      textTransform: 'uppercase',\n                      textAlign: 'center',\n                    }}\n                  >\n                    {initial}\n                  </Text>\n                </Box>\n              )\n            })}\n          </Flex>\n        </Box>\n      </Box>\n    )\n  }}\n</SourceWords>\n`}</code></pre>\n    <SourceWords mdxType=\"SourceWords\">\n  {sourceWords => {\n        const currentYear = sourceWords.wordCountByMonth[sourceWords.wordCountByMonth.length - 1];\n        return <Box sx={{\n          backgroundColor: 'surface',\n          p: 3\n        }} mdxType=\"Box\">\n        <Flex mdxType=\"Flex\">\n        <Heading variant=\"styles.h4\" sx={{\n              mr: 2\n            }} mdxType=\"Heading\">{currentYear[0].year}</Heading>\n        <Text mdxType=\"Text\">Word count by month</Text>\n        </Flex>\n        <Box sx={{\n            display: 'flex',\n            flex: '1 1 auto',\n            height: 300\n          }} mdxType=\"Box\">\n          <Flex sx={{\n              flexWrap: 'wrap',\n              width: '100%'\n            }} mdxType=\"Flex\">\n            {currentYear.map((month, index) => {\n                const {\n                  initial,\n                  words\n                } = month;\n                return <Box key={index} sx={{\n                  display: 'flex',\n                  flexDirection: 'column',\n                  justifyContent: 'flex-end',\n                  pl: 1,\n                  pr: 1,\n                  width: `${100 / currentYear.length}%`\n                }} mdxType=\"Box\">\n                 <Text sx={{\n                    textAlign: 'center'\n                  }} mdxType=\"Text\">\n                    {`x${words}`}\n                  </Text>\n                  <Box sx={{\n                    backgroundColor: 'primary',\n                    height: `${words}%`,\n                    p: 1\n                  }} mdxType=\"Box\" />\n                  <Text sx={{\n                    textTransform: 'uppercase',\n                    textAlign: 'center'\n                  }} mdxType=\"Text\">\n                    {initial}\n                  </Text>\n                </Box>;\n              })}\n          </Flex>\n        </Box>\n      </Box>;\n      }}\n    </SourceWords>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}